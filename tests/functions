#!/bin/bash
#
# Copyright (c) 2015-2017, Gregory M. Kurtzer. All rights reserved.
#
# Copyright (c) 2016-2017, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#
# This software is licensed under a customized 3-clause BSD license.  Please
# consult LICENSE file distributed with the sources of this project regarding
# your rights to use or distribute this software.
#
# NOTICE.  This Software was developed under funding from the U.S. Department of
# Energy and the U.S. Government consequently retains certain rights. As such,
# the U.S. Government has been granted for itself and others acting on its
# behalf a paid-up, nonexclusive, irrevocable, worldwide license in the Software
# to reproduce, distribute copies to the public, prepare derivative works, and
# perform publicly and display publicly, and to permit other to do so.
#

message() {
    LEVEL="${1:-}"
    MESSAGE="${2:-}"
    if [ -z "$MESSAGE" ]; then
        return 0
    fi
    shift
    shift
    case "$LEVEL" in
        e|error|E|ERROR)
            tput -Txterm setaf 1 2>/dev/null
            printf "ERROR: $MESSAGE" "$@" 1>&2
            tput -Txterm sgr0 2>/dev/null
        ;;
        w|warn|warning|W|WARN|WARNING)
            tput -Txterm setaf 3 2>/dev/null
            printf "WARN: $MESSAGE" "$@" 1>&2
            tput -Txterm sgr0 2>/dev/null
        ;;
        1|INFO)
            if [ "$LEVEL" -le "$SINGULARITY_MESSAGELEVEL" ]; then
                printf "$MESSAGE" "$@"
            fi
        ;;
    esac

    return 0
}


cmd() {
    message 2 " + %-68.68s" "$*"
    "$@" >/dev/null 2>&1
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then
        message 2 "OK\n"
    else
        message 2 "ERROR\n"
    fi
    return $RETVAL
}

eval_abort() {
    eval "$@"
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        exit $RETVAL
    fi
    return 0
}


# Different versions of which respond differently (print aliases, or take
# different arguments)
singularity_which() {
    i="${1:-}"
    # Avoid non-pathnames with . not in path, and directories
    case $i in
        .* | /*)
            if [ -f "$i" -a -x "$i" ]; then
                echo "$i"
                return 0
            fi
    esac
    for p in `echo $PATH | sed -e 's/:/ /g'`; do
        if [ -f "$p/$i" -a -x "$p/$i" ]; then
            echo "$p/$i"
            return 0
        fi
    done
    return 1
}


parse_opts() {
    NEWOPTS=""
    while [ -n "${1:-}" ]; do
        case "${1:-}" in
            -*=*)
                ARG1=`echo -n "${1:-}" | cut -d = -f 1`
                ARG2=`echo -n "${1:-}" | cut -d = -f 2`
                NEWOPTS="$NEWOPTS \"$ARG1\" \"$ARG2\""
                shift
                continue
            ;;
            --*)
                NEWOPTS="$NEWOPTS \"${1:-}\""
                shift
                continue
            ;;
            -*)
                for o in `echo "${1:-}"| sed 's/^-//' | sed 's/./-& /g'`; do
                    NEWOPTS="$NEWOPTS \"$o\""
                done
                shift
                continue
            ;;
            *)
                NEWOPTS="$NEWOPTS $@"
                break
            ;;
        esac
    done
    # Eww, this is bad I know... Would be better just to pass the variable
    # around without making ad-hoc modifications... Got a better idea, let
    # me know! (gmk)
    echo "$NEWOPTS" | sed -e 's/\\/\\\\/g'
}


test_init() {
    if [ -z "${1:-}" ]; then
        echo "Called test_init without a title"
        exit 1
    fi

    TITLE="$1"
    shift

    if [ -n "${SINGULARITY_TESTDIR:-}" ]; then
        test_cleanup
    fi

    SINGULARITY_TESTDIR=`mktemp -d /tmp/stest.XXXXXX`

    echo
    echo "################################################################################"
    echo "$TITLE (script: $0, testdir: $SINGULARITY_TESTDIR)"
    echo
}

test_cleanup() {

    if [ -d "$SINGULARITY_TESTDIR" ]; then
        rm -rf "$SINGULARITY_TESTDIR"
    fi

    exit 0
}

exit_cleanup() {
    return 0
}


stest() {
    ERROR="${1:-}"
    OUTPUT="$SINGULARITY_TESTDIR/output"
    shift

    echo "$@" > "$SINGULARITY_TESTDIR/cmd"
    message 2 " + %-100.100s " "$*"

    "$@" >$OUTPUT 2>&1
    RETVAL="$?"

    if [ "$ERROR" = "0" -a "$RETVAL" != "0" ]; then
        message 2 "%13s ERROR\n" "(retval=$RETVAL)"
        tail "$OUTPUT"
        echo "Full output in: $OUTPUT"
        exit_cleanup
        exit 1
    elif [ "$ERROR" != "0" -a "$RETVAL" = "0" ]; then
        message 2 "%13s ERROR\n" "(retval=$RETVAL)"
        tail "$OUTPUT"
        echo "Full output in: $OUTPUT"
        exit_cleanup
        exit 1
    else
        message 2 "%13s OK\n" "(retval=$RETVAL)"
    fi
}
